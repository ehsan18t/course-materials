{
	"info": {
		"_postman_id": "1c02d430-87f3-493f-9a95-6a150d9951b9",
		"name": "SQA-Assignment-1-Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28446015",
		"_collection_link": "https://www.postman.com/ehsan18t/workspace/public/collection/28446015-1c02d430-87f3-493f-9a95-6a150d9951b9?action=share&source=collection_link&creator=28446015"
	},
	"item": [
		{
			"name": "Get Student List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(student) {\r",
							"        pm.expect(student).to.have.property('courses_passed');\r",
							"        pm.expect(student).to.have.property('id');\r",
							"        pm.expect(student).to.have.property('name');\r",
							"        pm.expect(student).to.have.property('personnummer');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Courses_passed is an array\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    pm.expect(responseData[0].courses_passed).to.be.an('array');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Personnummer is in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.forEach(function(student) {\r",
							"        pm.expect(student.personnummer).to.match(/^\\d{6}-\\d{4}$/);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/student",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"student"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Student with ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.to.have.status(200));\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.courses_passed).to.exist;\r",
							"    pm.expect(responseData.id).to.exist;\r",
							"    pm.expect(responseData.name).to.exist;\r",
							"    pm.expect(responseData.personnummer).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Courses_passed is an array\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.courses_passed).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.be.a('number').and.to.satisfy((val) => val >= 0, \"ID should be a non-negative integer\");\r",
							"});\r",
							"\r",
							"pm.test(\"Personnummer is in a valid format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.personnummer).to.match(/^\\d{6}-\\d{4}$/);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/student/1",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"student",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Student with ID (Invalid)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is in JSON format\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/student/10",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"student",
						"10"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('courses_passed');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('name');\r",
							"    pm.expect(responseData).to.have.property('personnummer');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Courses passed array is present and has expected number of elements\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.courses_passed).to.exist.and.to.be.an('array');\r",
							"    pm.expect(responseData.courses_passed).to.have.lengthOf(2);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0, \"Id should be a non-negative integer\");\r",
							"});\r",
							"\r",
							"pm.test(\"Name and personnummer are non-empty strings\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"    pm.expect(responseData.personnummer).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Personnummer should not be empty\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fakibaz Student\",\r\n    \"personnummer\": \"990101-1234\",\r\n    \"courses_passed\": [\"CSE2213\", \"CSE1110\"]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/create",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Student (No name field)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required field - error\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Error is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify the error message 'No name field'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const errorMessage = \"No name field\";\r",
							"    pm.expect(responseData.error).to.include(errorMessage);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"personnummer\": \"990101-1234\",\r\n    \"courses_passed\": [\"CSE2213\", \"CSE1110\"]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/create",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Student (Blank or null name)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required field - error\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Error is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify the error message 'Blank or null name'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const errorMessage = \"Blank or null name\";\r",
							"    pm.expect(responseData.error).to.include(errorMessage);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"\",\r\n    \"personnummer\": \"990101-1234\",\r\n    \"courses_passed\": [\"CSE2213\", \"CSE1110\"]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/create",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Student (No personnummer field)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required field - error\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Error is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify the error message 'No personnummer field'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const errorMessage = \"No personnummer field\";\r",
							"    pm.expect(responseData.error).to.include(errorMessage);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fakibaz Student\",\r\n    \"courses_passed\": [\"CSE2213\", \"CSE1110\"]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/create",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Student (Blank or null personnummer)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required field - error\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Error is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify the error message 'Blank or null personnummer'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const errorMessage = \"Blank or null personnummer\";\r",
							"    pm.expect(responseData.error).to.include(errorMessage);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fakibaz Student\",\r\n    \"personnummer\": \"\",\r\n    \"courses_passed\": [\"CSE2213\", \"CSE1110\"]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/create",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Student (Malformed personnummer)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required field - error\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Error is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify the error message 'Malformed personnummer'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const errorMessage = \"Malformed personnummer\";\r",
							"    pm.expect(responseData.error).to.include(errorMessage);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fakibaz Student\",\r\n    \"personnummer\": \"0101-1234\",\r\n    \"courses_passed\": [\"CSE2213\", \"CSE1110\"]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/create",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Student (Invalid month in personnummer)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required field - error\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Error is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify the error message 'Invalid month in personnummer'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const errorMessage = \"Invalid month in personnummer\";\r",
							"    pm.expect(responseData.error).to.include(errorMessage);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fakibaz Student\",\r\n    \"personnummer\": \"991301-1234\",\r\n    \"courses_passed\": [\"CSE2213\", \"CSE1110\"]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/create",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Student (Invalid day in personnummer)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required field - error\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Error is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify the error message 'Invalid day in personnummer'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const errorMessage = \"Invalid day in personnummer\";\r",
							"    pm.expect(responseData.error).to.include(errorMessage);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fakibaz Student\",\r\n    \"personnummer\": \"990132-1234\",\r\n    \"courses_passed\": [\"CSE2213\", \"CSE1110\"]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/create",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Student (Student Already Exist)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Error field is non-empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.error).to.exist.and.to.have.lengthOf.at.least(1, \"Error field should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the error message 'Personnummer already belongs to student'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const errorMessage = \"Personnummer already belongs to student\";\r",
							"    pm.expect(responseData.error).to.include(errorMessage);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fakibaz Student\",\r\n    \"personnummer\": \"990101-1234\",\r\n    \"courses_passed\": [\"CSE2213\", \"CSE1110\"]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/create",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Student (Empty or null course ID)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Error field is non-empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.error).to.exist.and.to.have.lengthOf.at.least(1, \"Error field should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the error message 'Empty or null course ID'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const errorMessage = \"Empty or null course ID\";\r",
							"    pm.expect(responseData.error).to.include(errorMessage);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fakibaz Student\",\r\n    \"personnummer\": \"880101-1234\",\r\n    \"courses_passed\": [\"\", \"CSE1110\"]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/create",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Student (Unhandled Exception on Server)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 500\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response content type is HTML\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fakibaz Student\",\r\n    \"personnummer\": \"200101-1234\",\r\n    \"courses_passed\": 12\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/create",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fakibaz Student Updated\",\r\n    \"personnummer\": \"990101-1234\",\r\n    \"courses_passed\": [\"CSE2213\", \"CSE1110\"]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/update/10",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"update",
						"10"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Student (No Found)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fakibaz Student Updated\",\r\n    \"personnummer\": \"980101-1234\",\r\n    \"courses_passed\": [\"CSE2213\", \"CSE1110\"]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/update/11",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"update",
						"11"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Student (No name field)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Error field is non-empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.error).to.exist.and.to.have.lengthOf.at.least(1, \"Error field should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the error message 'No name field'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const errorMessage = \"No name field\";\r",
							"    pm.expect(responseData.error).to.include(errorMessage);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"personnummer\": \"990101-1234\",\r\n    \"courses_passed\": [\"CSE2213\", \"CSE1110\"]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/update/10",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"update",
						"10"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Student (Blank or null name)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Error field is non-empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.error).to.exist.and.to.have.lengthOf.at.least(1, \"Error field should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the error message 'Blank or null name'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const errorMessage = \"Blank or null name\";\r",
							"    pm.expect(responseData.error).to.include(errorMessage);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"\",\r\n    \"personnummer\": \"990101-1234\",\r\n    \"courses_passed\": [\"CSE2213\", \"CSE1110\"]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/update/10",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"update",
						"10"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Student (Blank or null personnummer)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Error field is non-empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.error).to.exist.and.to.have.lengthOf.at.least(1, \"Error field should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the error message 'Blank or null personnummer'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const errorMessage = \"Blank or null personnummer\";\r",
							"    pm.expect(responseData.error).to.include(errorMessage);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fakibaz Student Updated\",\r\n    \"personnummer\": \"\",\r\n    \"courses_passed\": [\"CSE2213\", \"CSE1110\"]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/update/10",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"update",
						"10"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Student (No personnummer field)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Error field is non-empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.error).to.exist.and.to.have.lengthOf.at.least(1, \"Error field should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the error message 'No personnummer field'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const errorMessage = \"No personnummer field\";\r",
							"    pm.expect(responseData.error).to.include(errorMessage);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fakibaz Student Updated\",\r\n    \"courses_passed\": [\"CSE2213\", \"CSE1110\"]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/update/10",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"update",
						"10"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Student (Malformed personnummer)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Error field is non-empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.error).to.exist.and.to.have.lengthOf.at.least(1, \"Error field should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the error message 'Malformed personnummer'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const errorMessage = \"Malformed personnummer\";\r",
							"    pm.expect(responseData.error).to.include(errorMessage);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fakibaz Student Updated\",\r\n    \"personnummer\": \"0101-1234\",\r\n    \"courses_passed\": [\"CSE2213\", \"CSE1110\"]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/update/10",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"update",
						"10"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Student (Invalid month in personnummer)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Error field is non-empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.error).to.exist.and.to.have.lengthOf.at.least(1, \"Error field should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the error message 'Invalid month in personnummer'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const errorMessage = \"Invalid month in personnummer\";\r",
							"    pm.expect(responseData.error).to.include(errorMessage);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fakibaz Student Updated\",\r\n    \"personnummer\": \"991301-1234\",\r\n    \"courses_passed\": [\"CSE2213\", \"CSE1110\"]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/update/10",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"update",
						"10"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Student (Invalid day in personnummer)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Error field is non-empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.error).to.exist.and.to.have.lengthOf.at.least(1, \"Error field should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the error message 'Invalid day in personnummer'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const errorMessage = \"Invalid day in personnummer\";\r",
							"    pm.expect(responseData.error).to.include(errorMessage);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fakibaz Student Updated\",\r\n    \"personnummer\": \"990132-1234\",\r\n    \"courses_passed\": [\"CSE2213\", \"CSE1110\"]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/update/10",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"update",
						"10"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Student (Malformed course ID)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Error field is non-empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.error).to.exist.and.to.have.lengthOf.at.least(1, \"Error field should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the error message 'Malformed course ID'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const errorMessage = \"Malformed course ID\";\r",
							"    pm.expect(responseData.error).to.include(errorMessage);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fakibaz Student Updated\",\r\n    \"personnummer\": \"990130-1234\",\r\n    \"courses_passed\": [\"CSE213\", \"CSE1110\"]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/update/10",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"update",
						"10"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Student (Empty or null course ID)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Error field is non-empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.error).to.exist.and.to.have.lengthOf.at.least(1, \"Error field should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the error message 'Empty or null course ID'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const errorMessage = \"Empty or null course ID\";\r",
							"    pm.expect(responseData.error).to.include(errorMessage);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fakibaz Student Updated\",\r\n    \"personnummer\": \"990130-1234\",\r\n    \"courses_passed\": [\"\", \"CSE1110\"]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/update/10",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"update",
						"10"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Student (Changes to personnummer are not allowed)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Error field is non-empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.error).to.exist.and.to.have.lengthOf.at.least(1, \"Error field should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the error message 'Changes to personnummer are not allowed.'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const errorMessage = \"Changes to personnummer are not allowed.\";\r",
							"    pm.expect(responseData.error).to.include(errorMessage);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fakibaz Student Updated\",\r\n    \"personnummer\": \"980101-1234\",\r\n    \"courses_passed\": [\"CSE2213\", \"CSE1110\"]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/update/10",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"update",
						"10"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Student (Personnummer already belongs to student)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Error field is non-empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.error).to.exist.and.to.have.lengthOf.at.least(1, \"Error field should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the error message 'Personnummer already belongs to student'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const errorMessage = \"Personnummer already belongs to student\";\r",
							"    pm.expect(responseData.error).to.include(errorMessage);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fakibaz Student Updated\",\r\n    \"personnummer\": \"990101-1234\",\r\n    \"courses_passed\": [\"CSE2213\", \"CSE1110\"]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/update/11",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"update",
						"11"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Student (Unhandled Exception)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 500\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response content type is HTML\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fakibaz Student Updated\",\r\n    \"personnummer\": \"990101-1234\",\r\n    \"courses_passed\": 12\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/update/10",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"update",
						"10"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required field 'deleted'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.deleted).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Deleted field should not be empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.deleted).to.exist.and.to.not.be.empty;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/delete/10",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"delete",
						"10"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Student (Invalid Id)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Error field is non-empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.error).to.exist.and.to.have.lengthOf.at.least(1, \"Error field should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the error message 'Student ID fds is not formatted correctly.'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const errorMessage = \"Student ID fds is not formatted correctly.\";\r",
							"    pm.expect(responseData.error).to.include(errorMessage);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/delete/fds",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"delete",
						"fds"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Student (Id no exist)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(404);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/delete/100",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"delete",
						"100"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Program List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('courses_required');\r",
							"        pm.expect(item).to.have.property('id');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Courses_required is an array\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    pm.expect(responseData[0].courses_required).to.be.an('array');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/program",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"program"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Program",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response schema contains required fields - courses_required and id\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('courses_required');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/program/1",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"program",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Program (Invalid Id)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/program/fdg",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"program",
						"fdg"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Program (Id doesn't exist)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(404);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/program/500",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"program",
						"500"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Finished Program",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - completed_courses and status\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('completed_courses');\r",
							"    pm.expect(responseData).to.have.property('status');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Completed_courses is an integer and status is a boolean\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.completed_courses).to.be.a('number');\r",
							"    pm.expect(responseData.status).to.be.a('boolean');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/finished/1/1",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"finished",
						"1",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Finished Program (Program Not Exist)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(404);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/finished/1/4",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"finished",
						"1",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Finished Program (Student Not Exist)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(404);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/finished/100/1",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"finished",
						"100",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Finished Program (Student Invalid)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/finished/dgfs/1",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"finished",
						"dgfs",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Finished Program (Program Invalid)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/finished/1/sdfds",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"finished",
						"1",
						"sdfds"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BASE_URL",
			"value": "http://127.0.0.1:5000",
			"type": "string"
		}
	]
}